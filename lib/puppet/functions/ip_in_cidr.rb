# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#       Checks if an ip address is contained within a CIDR address of the form 192.168.0.1/24
#
#
#
Puppet::Functions.create_function(:'ip_in_cidr') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
    require 'ipaddr'
    unless args.length == 2 then
      raise Puppet::ParseError, ("ip_in_cidr(): wrong number of arguments (#{args.length}; must be 2: ip and cidr)")
    end
    ip = args[0]
    unless ip.respond_to?('to_s') then
      raise Puppet::ParseError, ("#{ip.inspect} is not a string. It looks to be a #{ip.class}")
    end
    ip = ip.to_s
    cidr = args[1]
    unless cidr.respond_to?('to_s') then
      raise Puppet::ParseError, ("#{cidr.inspect} is not a string. It looks to be a #{cidr.class}")
    end
    cidr = cidr.to_s
    begin
      IPAddr.new(cidr).include? IPAddr.new(ip)
    rescue ArgumentError => e
      raise Puppet::ParseError, (e)
    end
  
  end
end
